        private async Task<(bool IsValid, string ErrorMessage, CreateOrderInputDto CalculatedOrder)> ValidateAndCalculateOrderAsync(CreateOrderInputDto orderDto)
        {
            try
            {
                // Create a copy of the order for calculations
                var calculatedOrder = new CreateOrderInputDto
                {
                    CustomerId = orderDto.CustomerId,
                    AddressId = orderDto.AddressId,
                    CouponId = orderDto.CouponId,
                    PaymentMethod = orderDto.PaymentMethod,
                    AffiliateId = orderDto.AffiliateId,
                    AffiliateCode = orderDto.AffiliateCode,
                    SubOrders = new List<CreateSubOrderInputDto>()
                };

                var customer = await _context.Customers.FirstOrDefaultAsync(c => c.CustomerId == orderDto.CustomerId);
                if (customer == null)
                    return (false, $"Customer with ID {orderDto.CustomerId} not found", null);

                var address = await _context.Addresses.FirstOrDefaultAsync(a => a.AddressId == orderDto.AddressId && a.UserId == customer.UserId);
                if (address == null)
                    return (false, $"Address with ID {orderDto.AddressId} not found or does not belong to the customer", null);


                if(calculatedOrder.OrderItems != null&& calculatedOrder.OrderItems.Count > 0)
                {
                    foreach(var orderItem in calculatedOrder.OrderItems)
                    {
                        var SellerId = _context.Products.FindAsync(orderItem.ProductId).Result.SellerId;
                        CreateSubOrderInputDto suborder = new CreateSubOrderInputDto()
                        {
                            SellerId = SellerId,
                            
                            
                        };
                    }
                }
                decimal orderSubtotal = 0;

                foreach (var subOrderDto in orderDto.SubOrders)
                {
                    // Verify seller exists
                    var seller = await _context.Sellers.FirstOrDefaultAsync(s => s.SellerId == subOrderDto.SellerId && s.IsVerified == true);
                    if (seller == null)
                        return (false, $"Seller with ID {subOrderDto.SellerId} not found or is not verified", null);

                    var calculatedSubOrder = new CreateSubOrderInputDto
                    {
                        SellerId = subOrderDto.SellerId,
                        OrderItems = new List<CreateOrderItemInputDto>(),
                    };

                    decimal subOrderTotal = 0;

                    // Process each item in this sub-order
                    foreach (var itemDto in subOrderDto.OrderItems)
                    {
                        // Validate product
                        var product = await _context.Products
                            .FirstOrDefaultAsync(p => p.ProductId == itemDto.ProductId && p.IsAvailable == true);

                        if (product == null)
                            return (false, $"Product with ID {itemDto.ProductId} not found or is not available", null);

                        // Validate quantity
                        if (!itemDto.VariantId.HasValue && itemDto.VariantId > 0 && product.StockQuantity < itemDto.Quantity)
                            return (false, $"Product with ID {itemDto.ProductId} does not have enough stock. Available: {product.StockQuantity}", null);

                        // Calculate item price based on product or variant
                        decimal itemPrice;

                        if (itemDto.VariantId.HasValue)
                        {
                            var variant = await _context.ProductVariants
                                .FirstOrDefaultAsync(v => v.VariantId == itemDto.VariantId &&
                                                       v.ProductId == itemDto.ProductId &&
                                                       v.IsAvailable == true);

                            if (variant == null)
                                return (false, $"Variant with ID {itemDto.VariantId} not found or is not available", null);

                            if (variant.StockQuantity < itemDto.Quantity)
                                return (false, $"Variant with ID {itemDto.VariantId} does not have enough stock. Available: {variant.StockQuantity}", null);

                            // Calculate price with discount if applicable
                            itemPrice = variant.Price;
                            if (variant.DiscountPercentage.HasValue && variant.DiscountPercentage > 0)
                            {
                                itemPrice = itemPrice - (itemPrice * variant.DiscountPercentage.Value / 100);
                            }
                        }
                        else
                        {
                            // Calculate price with discount if applicable
                            itemPrice = product.BasePrice;
                            if (product.DiscountPercentage.HasValue && product.DiscountPercentage > 0)
                            {
                                itemPrice = itemPrice - (itemPrice * product.DiscountPercentage.Value / 100);
                            }
                        }

                        // Round to 2 decimal places
                        itemPrice = Math.Round(itemPrice, 2);

                        // Calculate total for this item
                        decimal itemTotal = itemPrice * itemDto.Quantity;

                        // Add to sub-order total
                        subOrderTotal += itemTotal;

                        // Create calculated order item
                        var calculatedItem = new CreateOrderItemInputDto
                        {
                            ProductId = itemDto.ProductId,
                            Quantity = itemDto.Quantity,
                            PriceAtPurchase = itemPrice,
                            TotalPrice = itemTotal,
                            VariantId = itemDto.VariantId
                        };

                        calculatedSubOrder.OrderItems.Add(calculatedItem);
                    }

                    // Set the calculated subtotal
                    calculatedSubOrder.Subtotal = Math.Round(subOrderTotal, 2);
                    orderSubtotal += subOrderTotal;

                    calculatedOrder.SubOrders.Add(calculatedSubOrder);
                }

                // Step 3: Calculate discount from coupon if provided
                decimal discountAmount = 0;

                if (orderDto.CouponId.HasValue)
                {
                    var coupon = await _context.Coupons
                        .FirstOrDefaultAsync(c => c.CouponId == orderDto.CouponId && c.IsActive == true);

                    if (coupon == null)
                        return (false, $"Coupon with ID {orderDto.CouponId} not found or is not active", null);

                    // Verify coupon date validity
                    var currentDate = DateTime.UtcNow;
                    if (currentDate < coupon.StartDate || currentDate > coupon.EndDate)
                        return (false, "Coupon is not valid at this time", null);

                    // Verify minimum purchase
                    if (coupon.MinimumPurchase.HasValue && orderSubtotal < coupon.MinimumPurchase.Value)
                        return (false, $"Order subtotal does not meet the minimum purchase requirement of {coupon.MinimumPurchase.Value:C} for this coupon", null);

                    // Calculate discount
                    if (coupon.DiscountType == "Fixed")
                    {
                        discountAmount = coupon.DiscountAmount;
                    }
                    else if (coupon.DiscountType == "Percentage")
                    {
                        discountAmount = orderSubtotal * (coupon.DiscountAmount / 100);
                    }

                    // Cap discount at the order subtotal
                    discountAmount = Math.Min(discountAmount, orderSubtotal);
                    discountAmount = Math.Round(discountAmount, 2);
                }

                // Step 4: Calculate tax and shipping
                decimal taxRate = 0.05m; 
                decimal taxAmount = Math.Round(orderSubtotal * taxRate, 2);
                decimal shippingFee = 10.00m;

                // Reduce or eliminate shipping for larger orders
                if (orderSubtotal > 100)
                    shippingFee = 5.00m;

                if (orderSubtotal > 200)
                    shippingFee = 0.00m;

                // Step 5: Calculate final amount
                decimal finalAmount = orderSubtotal - discountAmount + taxAmount + shippingFee;
                finalAmount = Math.Round(finalAmount, 2);

                // Set all calculated values to the order
                calculatedOrder.TotalAmount = orderSubtotal;
                calculatedOrder.DiscountAmount = discountAmount;
                calculatedOrder.TaxAmount = taxAmount;
                calculatedOrder.ShippingFee = shippingFee;
                calculatedOrder.FinalAmount = finalAmount;

                return (true, string.Empty, calculatedOrder);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error validating and calculating order");
                return (false, $"Error validating order: {ex.Message}", null);
            }
        }
using System.ComponentModel.DataAnnotations;

namespace Jumia_Clone.Models.DTOs.OrderDTOs
{
    public class CreateSubOrderInputDto
    {
        [Required]
        public int SellerId { get; set; }

        [Required]
        public List<CreateOrderItemInputDto> OrderItems { get; set; }
        
        // This property will be calculated by the backend
        public decimal Subtotal { get; set; }
    }

}
 using System.ComponentModel.DataAnnotations;

namespace Jumia_Clone.Models.DTOs.OrderDTOs
{
    public class CreateOrderItemInputDto
    {
        [Required]
        public int ProductId { get; set; }

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Quantity must be at least 1")]
        public int Quantity { get; set; }

        public int? VariantId { get; set; }
        
        // These properties will be calculated by the backend
        public decimal PriceAtPurchase { get; set; }
        public decimal TotalPrice { get; set; }
    }
}
using System.ComponentModel.DataAnnotations;

namespace Jumia_Clone.Models.DTOs.OrderDTOs
{
    public class CreateOrderInputDto
    {
        [Required]
        public int CustomerId { get; set; }

        [Required]
        public int AddressId { get; set; }

        public int? CouponId { get; set; }

        [Required]
        [StringLength(20)]
        public string PaymentMethod { get; set; }

        public int? AffiliateId { get; set; }

        [StringLength(20)]
        public string AffiliateCode { get; set; }

        [Required]
        public List<CreateOrderItemInputDto> OrderItems { get; set; }
        
        // These properties will be calculated by the backend
        public decimal TotalAmount { get; set; }
        public decimal? DiscountAmount { get; set; }
        public decimal? ShippingFee { get; set; }
        public decimal? TaxAmount { get; set; }
        public decimal FinalAmount { get; set; }
        
        // This will be populated by the backend
        public List<CreateSubOrderInputDto> SubOrders { get; set; }
    }
}
if(calculatedOrder.OrderItems != null&& calculatedOrder.OrderItems.Count > 0)
{
    foreach(var orderItem in calculatedOrder.OrderItems)
    {
        var SellerId = _context.Products.FindAsync(orderItem.ProductId).Result.SellerId;
        CreateSubOrderInputDto suborder = new CreateSubOrderInputDto()
        {
            SellerId = SellerId,
            
            
        };
    }
}